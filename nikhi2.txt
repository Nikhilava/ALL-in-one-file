list
# a=[110,20,20,40,40]
# a[1]=40

# print(a)

# a=[10,50,40,60,70]
# new_list=[]
# for i in a:
#      new_list.append(i+1)
# print(new_list)
# list comprashion

# a=[10,50,40,20]
# list=[i+1 for i in a]
# print(list)

# list=[]
# for i in range(10):
#     list.append(i+1)
# print(list)

#
# list=[i+1 for i in range(10)]
# print(list)

# a=[]
# for i in range(20):
#     if(i%2==0):
#         a.append(i)
#     else:
#         a.append('invalied')
# print(a)


# list=[i if i%2==0 else ("invalied") for i in range(20)]
# print(list)


# a=[10,20,40,70,80,30]
# a.sort()
# a.reverse()
# print(a)
# print(len(a))
# a.append(50)
# print(a)
# a.insert(1,80)
# print(a)
# a[0]=80
# print(a)

# BREACK AND CONTINIOUS STATMENT
import json
from threading import *
# for i in range(10):
#     if i==5:
#         break
#     print(i)
# print("rest of th code")
#CONTINIOUS STATMENT




#2 TOUPLE ()
# its is ummuatiable(its not change the touple)
# now its change to touple to list by using comand
# cars=("nikhil","priti")
# print(cars)
# mycars=list(cars)
# print(mycars)
# mycars[0]="avanti"
# print(mycars)
#
# a=[]
# n=int(input("enter the first number"))
# for i in range(n):
#     a.append(i)
#     # a.append(int(input("enter the first number")))
# print(list(a))


#3 SET {}
#Set is not allowed to duplicate value
#its mutiable(it is allow to modified)
# s={10,10}
# print(s) #...........not allowed to duplicate value

# Basic operation in set
#1)update
# t={10,20,30,40,50}
# g={50,40,20,30}
# t.update(g)
# print(t)  #...connect two value


#2) Add
# t={10,20,30,40,50}
# t.add(80)
# print(t)

#3 Remove
# t={10,20,30,40,50}
# t.remove(40)
# print(t)

#4)DISCARD
# t={10,20,30,40,50}
# t.discard(90)
# print(t)
#whats is diffarence betwin remove and discard
 #(remve function is only remove prisent list elemint but discard is remove not prisent elemnt in list)

# creating Empty Set
# a=set()
# print(type(a))

#set are unorder so we can not access element using index
# t={10,20,30,40,50}
# e={80,50,60,40}
# w=t.intersection(e)   #....[interction mins  =coman value are present]
# print(w)  # c
# coman value are print

# SET COMPREHENSION
# t={10,20,30,40,50}
# new_set=set()
# for i in t:
#     new_set.add(i+1)
# print(new_set)


# e={i+1 for i in t}
# print(e)

#2#) e=set()
# for i in range(10):
#     e.add(i+1)
# print(e) # normal set function
#
# t={i+1 for i in range(10)}
# print(t)   # set conforgation use bby single line output

#3)  DICTIONARY

#its is combination of key value pair
#its is mutiable (its is aloow to modifay without changing identify)
#keys are not be ripited value can aby data type and can be duplicate
# d1={"nikhil":"priti","avanti":"khyade","pratmesh":"swami","abc":{"ab":"a"}}
# d1[420]="kisan"
# print(["nikhil"])
# d1["pravin"]="khyade"
# print(d1)
# del d1["nikhil"]...delet key and value
# print(d1)
# d1.update({"chimy":"gumy"})
# print(d1)

# print(d1.keys())
# print(d1.items())
# print(d1.values())
# d1["nikhil"]='niks'
# print(d1)
# for x in d1:
#     print(x)....print only keys
# for x in d1:
#     print(d1[x])



#4) FUNCTION
#ITS SUB PROGRAM OF LARGE PROGRAM
#ITS  IS DIVIDED BY SMALL PRORAM
# ITS IS IMPROVE EFFICENCY OF PROGRAM

# def Abc(b):
#     a=10
#     c=(a+b)
#     print(c)
# d=Abc(10)
# print(d)






#4) FUNCTION
#simpleunction
# def evenOdd(x):
#     if x%2==0:
#         print("even")
#     else:
#         print("odd")
# evenOdd(2)
# evenOdd(3)
#2) Python progarms to demostrate keyward Argurment

# def user(firstname,lastname):
#     print(firstname,lastname)
# user(firstname="nikhil",lastname="avanti")
# user(lastname="avanti",firstname="nikhil")


#3) VARIABLE LENGTH IS NON KEYWARD ARGURMENT:

# * args for variable number of argurment
# not fixed parameter to user at that time non keyward argurment are used
# def user(*abc):
#     for i in abc:
#         print(i)
#         # print(x)
#
# user("nikhil","priti","avanti")


# vriable  length KEYWARD ARGURMENT
# * kwargs for variable number of keyward argurment
# dont no keyward length at that time non kwywrd argurment are used.

# def user(**kwargs):
#     for key,value in kwargs.items():
#         print(key,value)
# user(first='nikhil',second='avanti')


#
# why python is first class object?
#ans=we can pass function variable,we can pass object,we can return function ,both are same object ..objct are same opertion thats reasion function is first class object

# UPPARE ANE LOWER CASE

# def function(x):
#     return x.upper()
#
# d=function('nikhil')
# print(d)

# def function(x):
#     return x.upper()
# d=function("avanti")
# print(d)

#2)
# def function(x):
#     return x.lower()
# d=function("NIKHIL")
# print(d)


#5)
#function can return anoter function

# def function1(x):
#     def function2(y):
#         return(x+y)
#     return function2
# d=function1(50)
# print(d(40))

#Return multipal value in function
# def all(x,y):
#     sum=(x*y)
#     add=(x+y)
#     div=(x/y)
#     return sum,add,div
# x=int(input("enter the first no"))
# y=int(input("enter the second number"))
# d=all(x,y)
# # print(d)
# for i in d:
#     print(i)

#local veriable:
#local veriable are declred are inside the function is known as local veriable
#
# def abc():
#       x=10  # ......this is local veriable
#       print(x)
# abc()

 #2)
# def abc(y):
#     x=10  #....this is local veriable
#     # print(x)
#     c=x+y
#     print(c)
# abc(10)



# Global veriable:
#
# its is outside the function
# x=30 #...this is global veriable
# def abc():
#     x=10
#     print("print local a",x)
#     w=globals()['x']  #.. now global variable is acces inside the function by using (GLOBALS ) function
#     print(w)
# abc()

# x=10
# def function():
#     x=30
#     print("this is local ver",x)
#     w=globals()["x"]
#     print(w)
# function()

# LAMBDA FUNCTION
# show=lambda x: print(x)
# show(10)

     # LAMBDA WITH  USER DEFINES FUNCTION
# def Abc(x):
#     return (lambda y:x+y)
# t=Abc(10)
# print(t(20))
#map function using with lambda function
# mylist=[1,2,3,4,5,6,7]
# p=list(map(lambda a:(a/3!=2),mylist))
# print(p)

# mylist=[10,20,33,40]
# p=list(map(lambda a:(a*2!=10),mylist))
# print(p)

# s=lambda a:a*a
# print(s(5))

# s=lambda x,y:x**10+y**10
# print(s(5,5))
# s=lambda x,y:(3*x+4*y)
# print(s(10,50))
# a=[10,20,30,40]
# def abc(n):
#     return(n+2)
# result=list(map(abc,a))
# print(result)

##OOPS:

# method override:
#its concept is same method name child class and parent class at that time method is overide are used
#inheriantanc concept

#
# class Abc:
#     def __init__(self):
#         pass
#     def abc(self):
#         print("hi iam pareant class")
# class pqr(Abc):
#     def abc(self):
#         super().abc()   #  super()ley are used to call the parent class also
# #         print("i im child class")
# # a=pqr()
# # a.abc()
#
# class Abc:
#     def __init__(self):
#         pass
#     def abc(self):
#         print("hi iam parient class")
# class pqr(Abc):
#     def __init__(self):
#         pass
#     def abc(self):
#         super().abc()
#         print("hi aim nikhil avanti")
# a=pqr()
# a.abc()

#3)
# class Abc:
#
#     def __init__(self):
#         print("hi iam parent class method")
#
#     def xyz(self):
#         print("hi iam parent class method class ")
# class pqr(Abc):
#     def __init__(self):
#         super().__init__()
#         print("hi iam child class method")
#     def xyz(self):
#         super().xyz()
#         print("hi iam child class no ")
# e=pqr()
# e.xyz()

# class Abc:
#     def __init__(self,x,y):
#         self.x=x
#         self.y=y
#         c=(x+y)
#         print(c)
#         print("hi today is sunday")
#     def xyz(self):
#         print("iam team brain work")
#     def mnr(self):
#         print("this is mnr")
# class pqr(Abc):
#     def __init__(self,x,y,z):
#         self.z=z
#         print(z)
#         super().__init__(x,y)
#         print("today is not sunday")
#     def xyz(self):
#         print("hi iam nikhil avanti")
#         super().xyz()
#     def ab(self):
#         print("this is ab")
# q=pqr(10,22,30)
# q.xyz()
# q.ab()
# q.mnr()
#







#
# class Abc():
#     def __init__(self,x,y):
#         self.x=x
#         self.y=y
#         c=x*y
#         print(c)
#         print("this is pareant class constructor")
#     def abc(self):
#         print("this is pareant class method")
# class pqr(Abc):
#     def __init__(self,x,y,z):
#         self.z=z
#         print(z)
#         super().__init__(x,y)
#         print("this is child class constructor")
#     def abc(self):
#         super().abc()
#         print("this is child clas method")
# p=pqr(10,10,20)
# p.abc()


#4) [NOTE-normaly python is avery thing is bject.]
# self() Key word
# witout inheritace we can call the or acces the pareant class method in child class:

# class A:
#     def __init__(self):
#         print("this is class a inheriantace")
#     def abc(self):
#         print("this is class a method")
# class B:
#     def __init__(self):
#         self.a=A()
#         print("this is class b inheriantance")
#     def pqr(self):
#         self.a.abc()
#         print("this is class b method")
#
# c=B()
# c.pqr()




# class A:
#     def __init__(self):
#         print("this is pareant clas inheritance")
#     def abc(self):
#         print("this is class a method")
# class B():
#     def __init__(self):
#         # self.a=A()
#
#         print("this is class b inheritance ")
#     def pqr(self):
#         print("this is class b method ")
# class C():
#     def __init__(self):
#         self.a=A()
#         print("this is class c constructor")
#     def npa(self):
#         self.a.abc()
#         print("this is class c method")
# d=C()
# d.npa()

## single level inheritance(SAME AS INHERITANCE IS ABOVE INHERITANCE EXAMPLE)
# MUTI LEVEL INHERITANCE
# class A:
#     def __init__(self):
#         print("this is class a constructor")
#     def method1(self):
#         print("this is claa a ")
#     def method2(self):
#         print("this is class a 2 method")
# class B(A):
#     def __init__(self):
#         # super(B, self).__init__()
#         print("this is class b constructor")
#     def method1(self):
#         super(B, self).method1()
#         print("this is claa B ")
# class C(B):
#     def __init__(self):
#         super(C, self).__init__()
#
#         print("this is class a constructor")
#     def method1(self):
#         super(C, self).method1()
#                                                        #.. class  is imagite of class c thats reasion clalling to class
#         print("this is claa  C")
# d=C()
# d.method1()
# d.method2()
#




# MULTI PAL INHERITANCE 
# class A:
#     def __init__(self):
#         print("this is class a ")
#     def method1(self):
#         print("Eliphant")
#     def method2(self):
#         print("this is class a method2")
# class B:
#     def __init__(self):
#
#         print("class B constructor")
#
#
#     def method1(self):
#
#         print("donkey")
# class C(A,B):    #...............class(B,A) ths are call to parent class which is defind  in in class
#     def __init__(self):
#         super(C,self).__init__()

#         print("this is class c constructor")
#     def method1(self):
#         print("this is class c mthod")
#
# d=C()
# d.
#
# method1

# FILE HANDLING :

# f=open("student11.txt",mode="w")
# f.write("hi iam nikhil avanti \n")
# f.write("from solpur \n")
# f.close()
#
# f=open("student11.txt",mode="r")
# data= f.read()
# print(data)
# f.close()    # its text mode decode the file
#
# f=open("student11.txt",mode="rb")     #..this is binary mode thats reasion not de- code
# data=f.read()
# print(data)
# f.close()





# f=open("braiinwork.txt",mode="w")
# f.write("this is team brain work\n")
# f.write("all ar in python student ")
# f.write("finally done full stack devolper batch")
# f.close()
#
# f=open("braiinwork.txt",mode="r")
# data=f.read()
# print(data)
# f.close()
#
# f=open("braiinwork.txt",mode="rb")
# data=f.read()
# print(data)
# f.close()
#
# class Abc():
#     def __init__(self,x,y):
#         self.x=x
#         self.y=y
#         c=(x+y)
#         print(c)
#         print("hi today is sunday")
#     def ab(self):
#         print("iam team brain work")
#     def mnr(self):
#         print("this is mnr")
# class Aaa(Abc):
#     def __init__(self,x,y):
#         # super().__init__(x, y)
#         self.x=x
#         self.y=y
#         d=(x*y)
#         print(d)
#         print("hi AAAAAAA")
#     def xyz(self):
#         print("iam team AAAAAAAA")
# class pqr(Abc):
#     def __init__(self,x,y,z):
#         self.z=z
#         print(z)
#         super(pqr,self).__init__(x,y)
#         print("today is not sunday")
#     def xyz(self):
#         print("hi iam nikhil avanti")
#         super().xyz()
#     def bb(self):
#         print("this is ab")
# q=pqr(10,22,30)
# q.xyz()
# q.ab()
# q.mnr()




# Exception file Handling.
#its is except the error by run time program

#Try=try block contain the code which may causes xception
#Exception=its is except the error in block
#else=when error is not in exception at time else are excasuctive
#finally=this blck is excucated wither the Exception is run or not
# WE CAN WRUTE SEVERAL ECXEPT BLOCK IN SINGAL TRY BLOCK#
#we can not except block write without try block
#
# a=10
# b=0
# try:
#     c=a/b
#     print(c)
#     print("this is second run")
# except ZeroDivisionError:
#     print("not allowed zero division error")
# else:  # only esle is run when no exception error
#     print("else block is run")
# print("rest of the code")

#2
# a=10
# b=0
# try:
#     c=a/d
#     print(c)
#     print("this is second run")
# except ZeroDivisionError:
#     print("not allowed zero division error")
# except NameError:
#     print("accept name error")  # name error run
# else:  # only esle is run when no exception error
#     print("else block is run")
# print("rest of the code")


#3
# a=10
# b=0
# try:
#     c=a/b
#     print(c)
#     print("this is second run")
# except (ZeroDivisionError,NameError) as Np:
#     print(Np)
# # except: # thsi is also run without type error name
#     print("excepton handler")

# else:
#     print("else is not run")
# finally:
#     print("finally program is run")


#USER DEFINED FUNCTION
#A programer are create own function is known as user defined function
#
# JASON (JAVA SCRIPT ORIENTED PROGRAM):
# d={"a":10,"b":20,"c":'nikhil',"40":"priti"}
# print(d)
#
# d2=json.dumps(d)
# print(d2)
#
# d3=json.loads(d2)
# print(type(d3))
# print(d3)

# d = {"a": 10, "b": 20, "c": 'nikhil', "40": "priti"}
# print(type(d))
# print(d)
# d2=json.dumps(d)
# print(d2)
#
# d3=json.loads(d2)
# print(d3)










#multithreading
# from threading import *
#
# def show(num):
#     for i in num:
#         print("addition in list",i+20)
# def abc(num):
#     for x in num:
#         print("mul of num",x*2)
# num=[10,20,30,40,50]
# T1=Thread(target=show,args=(num,))
# T2=Thread(target=abc,args=(num,))
# T1.start()
# T2.start()

